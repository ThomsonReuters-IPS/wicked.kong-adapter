#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kong-adapter:kong-adapter');
var http = require('http');
var async = require('async');
var wicked = require('wicked-sdk');

var kong = require('../kong/main');
var utils = require('../kong/utils');
var kongMonitor = require('../kong/monitor');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

debug('Waiting for API to be available.');

app.apiAvailable = false;
app.kongAvailable = false;

const wickedOptions = {
    userAgentName: 'wicked.portal-kong-adapter',
    userAgentVersion: utils.getVersion(),
    doNotPollConfigHash: true
};

async.series([
    callback => wicked.initialize(wickedOptions, callback),
    callback => wicked.initMachineUser('kong-adapter', callback),
    callback => wicked.awaitUrl(wicked.getInternalKongAdminUrl(), callback),
    callback => kongMonitor.init(app, callback)
], function (err) {
    debug('Kong and API await finished.');
    if (err) {
        debug('Failed waiting for API and/or Kong.');
        throw err;
    }

    // Jot down a couple of URLs
    app.set('my_url', wicked.getInternalKongAdapterUrl());

    // Now let's register with the portal API; we'll use the standard Admin
    var initOptions = {
        initGlobals: true,
        syncApis: true,
        syncConsumers: true
    };
    kong.init(app, initOptions, function (err) {
        debug('kong.init() returned.');
        if (err) {
            debug('Could not initialize Kong adapter.');
            throw err;
        }

        // Graceful shutdown
        process.on('SIGINT', function() {
            debug("Gracefully shutting down.");
            kong.deinit(app, function(err) {
                process.exit();
            });
        });

        debug("Kong Adapter initialization done.");
        app.initialized = true;
    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr : 
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
